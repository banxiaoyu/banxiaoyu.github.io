<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>半小雨的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.banxiaoyu.com/"/>
  <updated>2017-01-06T08:17:03.206Z</updated>
  <id>http://www.banxiaoyu.com/</id>
  
  <author>
    <name>banxiaoyu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql小技巧</title>
    <link href="http://www.banxiaoyu.com/2017/01/06/mysql%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://www.banxiaoyu.com/2017/01/06/mysql小技巧/</id>
    <published>2017-01-06T08:09:54.000Z</published>
    <updated>2017-01-06T08:17:03.206Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mysql-小技巧"><a href="#Mysql-小技巧" class="headerlink" title="Mysql 小技巧"></a>Mysql 小技巧</h1><hr>
<h3 id="更新表a-字段url-该条记录中parent-id的url"><a href="#更新表a-字段url-该条记录中parent-id的url" class="headerlink" title="更新表a 字段url = 该条记录中parent_id的url"></a>更新表a 字段url = 该条记录中parent_id的url</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UPDATE dede_arctype a,dede_arctype b SET a.typedir = CONCAT(b.typedir,&apos;/&apos;,a.typedir) WHERE a.reid = b.id;</div></pre></td></tr></table></figure>
<h3 id="连表更新字段"><a href="#连表更新字段" class="headerlink" title="连表更新字段"></a>连表更新字段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UPDATE 表1 a, 表2 b set a.parent_url = b.url;</div></pre></td></tr></table></figure>
<h3 id="select-查出重复的记录"><a href="#select-查出重复的记录" class="headerlink" title="select 查出重复的记录"></a>select 查出重复的记录</h3><pre><code class="mysql">select * from 表 where n_id in(select s_name from 表 group by s_name,n_money,s_zhipiao,s_date,s_lixi
    having count(s_name)&gt;1)
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mysql-小技巧&quot;&gt;&lt;a href=&quot;#Mysql-小技巧&quot; class=&quot;headerlink&quot; title=&quot;Mysql 小技巧&quot;&gt;&lt;/a&gt;Mysql 小技巧&lt;/h1&gt;&lt;hr&gt;
&lt;h3 id=&quot;更新表a-字段url-该条记录中parent-id的url&quot;&gt;&lt;
    
    </summary>
    
    
      <category term="php" scheme="http://www.banxiaoyu.com/tags/php/"/>
    
      <category term="mysql" scheme="http://www.banxiaoyu.com/tags/mysql/"/>
    
      <category term="update" scheme="http://www.banxiaoyu.com/tags/update/"/>
    
  </entry>
  
  <entry>
    <title>处理emoji表情</title>
    <link href="http://www.banxiaoyu.com/2017/01/06/%E5%A4%84%E7%90%86emoji%E8%A1%A8%E6%83%85/"/>
    <id>http://www.banxiaoyu.com/2017/01/06/处理emoji表情/</id>
    <published>2017-01-06T07:09:44.000Z</published>
    <updated>2017-01-06T08:22:01.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3种方法轻松处理php开发中emoji表情的问题"><a href="#3种方法轻松处理php开发中emoji表情的问题" class="headerlink" title="3种方法轻松处理php开发中emoji表情的问题"></a>3种方法轻松处理php开发中emoji表情的问题</h2><p>投稿：daisy 字体：[增加 减小] 类型：转载 时间：2016-07-18 我要评论<br>移动设备经常会发生用户发送的内容中包含emoji表情，未经处理，在显示时就是乱码。所以本文介绍在PHP微信开发中涉及到emoji表情的几种处理方法。<br>背景<br>做微信开发的时候就会发现，存储微信昵称必不可少。<br>可这万恶的微信支持emoji表情做昵称，这就有点蛋疼了<br>一般Mysql表设计时，都是用UTF8字符集的。把带有emoji的昵称字段往里面insert一下就没了，整个字段变成了空字符串。这是怎么回事呢？<br>原来是因为Mysql的utf8字符集是3字节的，而emoji是4字节，这样整个昵称就无法存储了。这要怎么办呢？我来介绍几种方法<br>解决方案</p>
<h3 id="1、使用utf8mb4字符集"><a href="#1、使用utf8mb4字符集" class="headerlink" title="1、使用utf8mb4字符集"></a>1、使用utf8mb4字符集</h3><p>如果你的mysql版本&gt;=5.5.3，你大可直接将utf8直接升级为utf8mb4字符集<br>这种4字节的utf8编码可完美兼容旧的3字节utf8字符集，并且可以直接存储emoji表情，是最好的解决方案<br>至于字节增大带来的性能损耗，我看过一些评测，几乎是可以忽略不计的</p>
<h3 id="2、使用base64编码"><a href="#2、使用base64编码" class="headerlink" title="2、使用base64编码"></a>2、使用base64编码</h3><p>如果你因为某些原因无法使用utf8mb4的话，你还可以使用base64来曲线救国<br>使用例如base64_encode之类的函数编码过后的emoji可以直接存储在utf8字节集的数据表中，取出时decode一下即可</p>
<h3 id="3、干掉emoji表情"><a href="#3、干掉emoji表情" class="headerlink" title="3、干掉emoji表情"></a>3、干掉emoji表情</h3><p>emoji表情是个麻烦的东西，即使你能存储，也不一定能完美显示。在iOS以外的平台上，例如PC或者android。如果你需要显示emoji，就得准备一大堆emoji图片并使用第三方前端类库才行。即便如此，还是可能因为emoji图片不够全而出现无法显示的情况在大多数业务场景下，emoji也不是非要不可的。我们可以适当地考虑干掉它，节约各种成本<br>经过一番苦苦的google，终于找到靠谱能用的代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 过滤掉emoji表情</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterEmoji</span><span class="params">($str)</span></span></div><div class="line">&#123;</div><div class="line"> $str = preg_replace_callback(</div><div class="line"> <span class="string">'/./u'</span>,</div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="params">(array $match)</span> </span>&#123;</div><div class="line"> <span class="keyword">return</span> strlen($match[<span class="number">0</span>]) &gt;= <span class="number">4</span> ? <span class="string">''</span> : $match[<span class="number">0</span>];</div><div class="line"> &#125;,</div><div class="line"> $str);</div><div class="line"> </div><div class="line"> <span class="keyword">return</span> $str;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>以上就是为大家总结的PHP微信开发中涉及到emoji表情的几种处理方法,基本思想就是遍历字符串中的每个字符，如果该字符的长度为4个字节，就将其删除。希望大家喜欢！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;3种方法轻松处理php开发中emoji表情的问题&quot;&gt;&lt;a href=&quot;#3种方法轻松处理php开发中emoji表情的问题&quot; class=&quot;headerlink&quot; title=&quot;3种方法轻松处理php开发中emoji表情的问题&quot;&gt;&lt;/a&gt;3种方法轻松处理php开发中
    
    </summary>
    
    
      <category term="php" scheme="http://www.banxiaoyu.com/tags/php/"/>
    
      <category term="emoji表情" scheme="http://www.banxiaoyu.com/tags/emoji%E8%A1%A8%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>php抽象类和抽象方法</title>
    <link href="http://www.banxiaoyu.com/2017/01/05/php%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95/"/>
    <id>http://www.banxiaoyu.com/2017/01/05/php抽象类和抽象方法/</id>
    <published>2017-01-05T01:47:57.000Z</published>
    <updated>2017-01-05T02:09:34.875Z</updated>
    
    <content type="html"><![CDATA[<p>可以使用abstract来修饰一个类或者方法。<br>用abstract修饰的类表示这个类是一个抽象类，用abstract修饰的方法表示这个方法是一个抽象方法。<br>抽象类不能被实例化。<br>抽象方法是只有方法声明，而没有方法的实现内容。</p>
<h2 id="abstract-抽象类"><a href="#abstract-抽象类" class="headerlink" title="abstract 抽象类"></a>abstract 抽象类</h2><p>可以使用abstract来修饰一个类。<br>用abstract修饰的类表示这个类是一个抽象类。<br>抽象类不能被实例化。<br>这是一个简单抽象的方法，如果它被直接实例化，系统会报错。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//定义一个抽象类  </span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> get_class(<span class="keyword">$this</span>);  </div><div class="line">    &#125;   </div><div class="line">&#125;  </div><div class="line"><span class="comment">//实例化这个类会出现错误  </span></div><div class="line"><span class="keyword">echo</span> <span class="keyword">new</span> User();  </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>下面例子的 NormalUser 继承自 User类，就可以被实例化了。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span>  </div><div class="line"><span class="comment">//定义一个抽象类  </span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> get_class(<span class="keyword">$this</span>);  </div><div class="line">    &#125;   </div><div class="line">&#125;  </div><div class="line"><span class="comment">//实例化这个类会出现错误  </span></div><div class="line"><span class="keyword">echo</span> <span class="keyword">new</span> User();  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NormalUser</span> <span class="keyword">extends</span> <span class="title">User</span>  </span></div><div class="line">&#123;  </div><div class="line">&#125;  </div><div class="line">$a = <span class="keyword">new</span> NormalUser();  </div><div class="line"><span class="keyword">echo</span> <span class="string">"这个类"</span> . $a . <span class="string">"的实例"</span>;  </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>单独设置一个抽象类是没有意义的，只有有了抽象方法，抽象类才有了血肉。下面介绍抽象方法。</p>
<h2 id="abstract-抽象方法"><a href="#abstract-抽象方法" class="headerlink" title="abstract 抽象方法"></a>abstract 抽象方法</h2><p>用abstract修饰的类表示这个方法是一个抽象方法。<br>抽象方法，只有方法的声明部分，没有方法体。<br>抽象方法没有 {} ，而采用 ; 结束。<br>一个类中，只要有一个抽象方法，这个类必须被声明为抽象类。<br>抽象方法在子类中必须被重写。<br>下面是一个抽象类，其中有两个抽象方法，分别是 setSal() 和 getSal()。用来取回 $sal 员工的工资。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span>  </div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">protected</span> $sal = <span class="number">0</span>;  </div><div class="line">    <span class="comment">//这里定义的抽象方法。  </span></div><div class="line">    <span class="comment">//注意抽象方法没有方法体，而且方法结束使用 ; 号。  </span></div><div class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">getSal</span><span class="params">()</span></span>;  </div><div class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">setSal</span><span class="params">()</span></span>;  </div><div class="line">    <span class="comment">//定义它的__tostring方法  </span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> get_class(<span class="keyword">$this</span>);  </div><div class="line">    &#125;   </div><div class="line">&#125;   </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>既然User类不能被直接继承，我们写一个NormalUser类继承自User类。当我们写成如下代码时，系统会报错。 这个错误告诉我们，在 User类中有两个抽象方法，我们必须在子类中重写这两个方法。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span>  </div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">protected</span> $sal = <span class="number">0</span>;  </div><div class="line">    <span class="comment">//这里定义的抽象方法。  </span></div><div class="line">    <span class="comment">//注意抽象方法没有方法体，而且方法结束使用 ; 号。  </span></div><div class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">getSal</span><span class="params">()</span></span>;  </div><div class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">setSal</span><span class="params">()</span></span>;  </div><div class="line">    <span class="comment">//定义它的__tostring方法  </span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> get_class(<span class="keyword">$this</span>);  </div><div class="line">    &#125;   </div><div class="line">&#125;  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NormalUser</span> <span class="keyword">extends</span> <span class="title">User</span>  </span></div><div class="line">&#123;  </div><div class="line">&#125;  </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>下面例子，重写了这两个方法，虽然方法体里面 {} 的内容是空的，也算重写了这个方法。注意看重写方法的参数名称，这里只要参数数量一致就可以，不要求参数的名称必须一致。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span>  </div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">protected</span> $sal = <span class="number">0</span>;  </div><div class="line">    <span class="comment">//这里定义的抽象方法。  </span></div><div class="line">    <span class="comment">//注意抽象方法没有方法体，而且方法结束使用；号。  </span></div><div class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">getSal</span><span class="params">()</span></span>;  </div><div class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">setSal</span><span class="params">()</span></span>;  </div><div class="line">    <span class="comment">//定义它的__tostring方法  </span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> get_class(<span class="keyword">$this</span>);  </div><div class="line">    &#125;   </div><div class="line">&#125;  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NormalUser</span> <span class="keyword">extends</span> <span class="title">User</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getSal</span><span class="params">()</span> </span>&#123;  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setSal</span><span class="params">($sal)</span> </span>&#123;   </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">    <span class="comment">//这样就不会出错了。  </span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>下面19-21行，三种写重写的方式都会报错。<br>19行，缺少参数。<br>20行，参数又多了。<br>21行，参数类型不对。（这种写法在以后章节介绍）<br>一个类中，如果有一个抽象方法，这个类必须被声明为抽象类。<br>下面这个类不是抽象类，其中定义了一个抽象方法，会报错。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span>  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">protected</span> $sal = <span class="number">0</span>;  </div><div class="line">    <span class="comment">//这里定义的抽象方法。  </span></div><div class="line">    <span class="comment">//注意抽象方法没有方法体，而且方法结束使用；号。  </span></div><div class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">getSal</span><span class="params">()</span></span>;  </div><div class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">setSal</span><span class="params">()</span></span>;  </div><div class="line">    <span class="comment">//定义它的__tostring方法  </span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> get_class(<span class="keyword">$this</span>);  </div><div class="line">    &#125;   </div><div class="line">&#125;  </div><div class="line">    <span class="comment">//这个类中有两个抽象方法，如果这个类不是抽象的。会报错  </span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>抽象类继承抽象类<br>抽象类继承另外一个抽象类时，不用重写其中的抽象方法。<br>抽象类中，不能重写抽象父类的抽象方法。<br>这样的用法，可以理解为对抽象类的扩展<br>下面的例子，演示了一个抽象类继承自另外一个抽象类时，不需要重写其中的抽象方法。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span>  </div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">protected</span> $sal = <span class="number">0</span>;  </div><div class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">getSal</span><span class="params">()</span></span>;  </div><div class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">setSal</span><span class="params">($sal)</span></span>;   </div><div class="line">&#125;  </div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">VipUser</span> <span class="keyword">extends</span> <span class="title">User</span>  </span></div><div class="line">&#123;  </div><div class="line">&#125;  </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="静态抽象方法"><a href="#静态抽象方法" class="headerlink" title="静态抽象方法"></a>静态抽象方法</h2><p>在PHP5.1中，抽象类中支持静态抽象方法。下面这个例子，看到静态抽象方法可以声明。实现这个方法时，必须是静态的方法。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span>  </div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">protected</span> <span class="keyword">static</span>  $sal = <span class="number">0</span>;  </div><div class="line">    <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">getSal</span><span class="params">()</span></span>;  </div><div class="line">    <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">setSal</span><span class="params">($sal)</span></span>;   </div><div class="line">&#125;  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">VipUser</span> <span class="keyword">extends</span> <span class="title">User</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getSal</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>::$sal;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">setSal</span><span class="params">($sal)</span> </span>&#123;  </div><div class="line">        <span class="keyword">self</span>::$sal = $sal;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">VipUser::setSal(<span class="number">100</span>);  </div><div class="line"><span class="keyword">echo</span> <span class="string">"you sal is "</span> . VipUser::getSal();  </div><div class="line"><span class="meta">?&gt;</span>  </div><div class="line"><span class="comment">//这里的抽象方法好像没有问题</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;可以使用abstract来修饰一个类或者方法。&lt;br&gt;用abstract修饰的类表示这个类是一个抽象类，用abstract修饰的方法表示这个方法是一个抽象方法。&lt;br&gt;抽象类不能被实例化。&lt;br&gt;抽象方法是只有方法声明，而没有方法的实现内容。&lt;/p&gt;
&lt;h2 id=&quot;abs
    
    </summary>
    
      <category term="php" scheme="http://www.banxiaoyu.com/categories/php/"/>
    
    
      <category term="php" scheme="http://www.banxiaoyu.com/tags/php/"/>
    
      <category term="抽象类" scheme="http://www.banxiaoyu.com/tags/%E6%8A%BD%E8%B1%A1%E7%B1%BB/"/>
    
      <category term="抽象方法" scheme="http://www.banxiaoyu.com/tags/%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>第一篇文章(转)</title>
    <link href="http://www.banxiaoyu.com/2016/12/22/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>http://www.banxiaoyu.com/2016/12/22/第一篇文章/</id>
    <published>2016-12-22T09:52:06.000Z</published>
    <updated>2016-12-23T01:40:26.486Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-分支管理策略"><a href="#git-分支管理策略" class="headerlink" title="git 分支管理策略"></a>git 分支管理策略</h1><hr>
<h2 id="0-一段发自内心的废话"><a href="#0-一段发自内心的废话" class="headerlink" title="0. 一段发自内心的废话"></a>0. 一段发自内心的废话</h2><p>为什么要用git，之前的一个培训文档已经说的很清楚了：git是目前为止市面上最先进的、免费的、易学易用的、符合人性的版本管理工具。</p>
<p>如果你没有参加之前的培训，那么请移步<a href="http://192.168.40.125/lizhixian/GIT_tutorial" target="_blank" rel="external">http://192.168.40.125/lizhixian/GIT_tutorial</a></p>
<p>如果不出我的预料，我们中的人之前都用过svn，而且基本没用过svn的分支管理，svn也就是拿来做一个备份工具，或者干脆是用来应付某些指标，即使有人用过分支管理，也是用的一肚子火。</p>
<p>与svn相比，git的精华就是分支管理，既然是精华，肯定有其独到之处：<br><code>&lt;!- more -&gt;</code></p>
<ul>
<li>git管理的项目，工作区只有一个，也就是说无论怎么切换分支，都在一个目录下</li>
<li>git分支的切换速度非常快，虽不能说是刹那间，但至少能让你感觉很快很快</li>
<li>git是分布式的，你可以任意创建分支并蹂躏它，别人不会发现的，嘿嘿嘿</li>
</ul>
<p>git分支虽然强大，但是用不好的话就没有任何价值，就像开着兰博基尼跑在早高峰的四环路一样,跑不过自行车。</p>
<p>好了，说了这么多废话，目的就是让你对git的分支管理有些感觉，有信心从svn分支管理的阴影中走出来。</p>
<p>接下来的2个节，我们按照从理论到实践的革命路线，带大家正确认识git的分支管理，以及如何爱上git分支。</p>
<h2 id="1-理论-git分支管理模型"><a href="#1-理论-git分支管理模型" class="headerlink" title="1. 理论-git分支管理模型"></a>1. 理论-git分支管理模型</h2><pre><code>Q: 大神，为什么要用分支开发？
A: 因为这是一个充满爱的世界，你会犯错，也会被原谅。
Q: 大神，我懂了，你是让我放心大胆的去犯错！
A: 开发经理不打断你的腿！
</code></pre><p>git的分支管理不仅适合 <strong>有多人合作开发</strong> 的项目，也适合 <strong>只有一个开发者</strong> 的个人项目。</p>
<p>下图是一个典型的git分支管理策略：</p>
<p><img src="/images/img/22.jpg" alt=""></p>
<p>看不懂吧，下面我用通俗而优美的文字解读一下：</p>
<p>假设：这个项目叫：helloworld，有2个开发者michael和bob，michael是项目的master，bob是developer。项目托管在gitlab上。</p>
<p>在开始工作之前，关于分支有几点需要强调一下，强调一下，强调一下：</p>
<pre><code>1. master分支不允许用来开发，master分支上永远是稳定的代码
2. dev分支是开发分支，上面的代码比master高一个版本且可能不是稳定的
3. 个人分支可以push到服务器上，也可以只在本地。如果你有删东西的习惯，最好还是push到服务器
4. 可以用tag做版本标记，这一点之前的培训没有提到过，这里详细补充说明一下。
</code></pre><p>现在开始工作：</p>
<pre><code>1. 项目经理在gitlab上创建helloworld仓库(这太简单了)，添加readme，然后将michael和bob加入项目的members并设定权限
2. 项目经理将仓库地址告诉michael和bob
3. michael从仓库地址clone下来项目，此时只有master分支
4. michael在本地创建并切换到dev分支，然后将dev分支push到gitlab上，此时helloworld在gitlab上有2个分支了：master和dev
5. michael在本地创建并切换到michael分支，用于feature开发
6. 现在轮到bob了，bob从仓库地址clone下来项目，此时bob也只有master分支
7. bob在本地创建并切换到dev分支，然后执行一次pull origin dev，将dev的源码pull到本地
8. bob在本地创建并切换到bob分支，用于feature开发
9. 好了，到此为止，一个项目的分支模型就建好了，虽然我上面说的有8条，但是操作起来绝对不超过1分钟（前提是你像我一样熟练，嘿嘿嘿）
</code></pre><p>准备工作做好以后，下面就正式进入开发流程了:</p>
<pre><code>1. michael开发了一段时间，完成了一个小功能（本地已经commit）
2. michael本地自测以后发现没有问题，可以合并到dev分支
3. michael在本地切换到dev分支，在合并michael之前，先更新一下dev: pull origin dev（dev可能被bob提交过）
4. dev更新完毕后(这个更新一般不会有冲突)，下面合并michael到dev: merge michael
5. 合并可能会出现冲突，解决完冲突后，将更改add，然后commit，再push origin dev
6. michael再切换回michael分支，michael可以merge dev，也可以pull origin dev到michael，将michael和dev同步
7. 至此michael合并dev完毕
8. 下面轮到bob了，bob合并bob分支到dev的流程与michael一样，都是：切换dev-&gt;更新dev-&gt;合并自己的feature分支到dev-&gt;解决冲突-&gt;commit-&gt;push-&gt;切换回自己的feature分支-&gt;同步dev与自己的feature分支
9. michael比bob多一个权限，就是合并dev到master。当michael和bob合作开发出一个版本以后，且测试从dev拿到的代码测试暂时没发现问题，michael就可以将dev合并到master了。
10. michael切换到master，然后先更新master（如果只有一个master权限者的话，这一步可以省略），然后merge dev到master(这一步不会出现冲突，除非有人不守规矩)，最后push master到origin master
</code></pre><p>如果master是一个可发布的版本，那么可以使用tag做一个发布标签，如 git tag v1.0，然后git push origin v1.0。</p>
<p>关于tag的具体的用法在下一节详细说明一下。</p>
<p>通过我上面通俗而又优美的文字描述，我想你一定看的脑袋都大了，没关系，我们看示例。</p>
<h2 id="2-实践-项目开发场景"><a href="#2-实践-项目开发场景" class="headerlink" title="2. 实践-项目开发场景"></a>2. 实践-项目开发场景</h2><p>我(lizhixian)是helloworld的项目经理，我在gitlab上创建了一个helloworld项目</p>
<p><img src="/images/img/24.jpg" alt=""></p>
<p>添加readme.md</p>
<p><img src="/images/img/27.jpg" alt=""></p>
<p>我将micheal和bob加入到项目的members，并设定他们的权限</p>
<p><img src="/images/img/25.jpg" alt=""></p>
<p>我将项目的地址告诉了micheal和bob</p>
<pre><code>我：hi, micheam and bob.
helloworld的仓库地址是：git@192.168.40.125:lizhixian/helloworld.git
项目主页是：http://192.168.40.125/lizhixian/helloworld

micheal: 好的
bob: 好的
</code></pre><p>micheal从仓库地址clone项目到本地</p>
<p><img src="/images/img/26.jpg" alt=""></p>
<p>此时只有master分支</p>
<p><img src="/images/img/28.jpg" alt=""></p>
<p>Micheal在本地创建dev分支并push到gitlab上</p>
<p><img src="/images/img/29.jpg" alt=""></p>
<p>此时gitlab上有master和dev两个分支</p>
<p><img src="/images/img/30.jpg" alt=""></p>
<p>Micheal在本地创建micheal分支</p>
<p><img src="/images/img/31.jpg" alt=""></p>
<p>Micheal的准备工作已经完成，下面轮到bob了</p>
<p><img src="/images/img/32.jpg" alt=""></p>
<p>到此，helloworld项目的分支模型就创建完毕了。Micheal和bob可以分别在自己的feature分支上进行开发了。</p>
<p>假如Micheal开发了一段时间以后，自测没有问题，可以提交到dev上，那么Micheal可以</p>
<p><img src="/images/img/33.jpg" alt=""></p>
<p>我们看到Micheal合并micheal到dev是一路顺风的，没有冲突。那么假如遇到冲突怎么办，下面看看bob的合并</p>
<p><img src="/images/img/34.jpg" alt=""></p>
<p>我们发现helloworld.txt有冲突了</p>
<p><img src="/images/img/35.jpg" alt=""></p>
<p><strong>下面解决冲突，解决的过程需要冲突的双方共同来协商，这个东西机器不能帮助你自动完成。冲突解决完毕后，切记要add</strong></p>
<p><img src="/images/img/36.jpg" alt=""></p>
<p>目前为止，已经给大家演示了git的分支管理策略，开发者通过dev分支来进行源代码的交换。</p>
<p>上面只是演示了2个开发者的开发流程，如果有多个开发者的话，流程也是一致的，都是通过dev来做代码交换。</p>
<p>如果dev上的代码已经测试完毕，暂时没有bug了，那么就可以合并到master上</p>
<p><img src="/images/img/37.jpg" alt=""></p>
<p>下面再说一下分支管理的一些技巧：</p>
<pre><code>1. 本地的dev分支最好每天都更新一下，保持与服务器的同步
2. 如果dev有更新，就合并到自己的feature分支上。这样可以防止最后合并feature到dev的时候，出现灾难
3. 最好学会使用命令行工具
</code></pre><p>上面说了分支如何使用，其实git还有一个非常好的功能就是标签-tag。</p>
<p>举个例子，helloworld是一个持续开发的项目，有详细的版本规划，如果我们每个版本都建立一个分支的话，这样虽然也能达到版本发布的目的，但是不安全，因为分支可能被别人改动。</p>
<p>git tag的使用比分支还要简单，简直一学就会</p>
<p>比如helloworld的master上的代码可以发布为v1.0版本，那么</p>
<pre><code>[root@localhost helloworld]# git tag v1.0
[root@localhost helloworld]# git tag
v1.0
[root@localhost helloworld]#
</code></pre><p>这样，master就被打上了标签v1.0，也就是v1.0对应当前master的快照</p>
<p>如果需要给标签加上日志，那么</p>
<pre><code>[root@localhost helloworld]# git tag -a v1.0 -m &apos;helloworld v1.0&apos;
[root@localhost helloworld]# git tag
v1.0
[root@localhost helloworld]# git show v1.0
tag v1.0
Tagger: root &lt;root@localhost.localdomain&gt;
Date:   Tue Jan 5 18:07:22 2016 +0800

helloworld v1.0
....
</code></pre><p>以上打的tag都是在本地，服务器端是看不到的（git是分布式的嘛），如果要共享tag，那么怎么办？push</p>
<pre><code>[root@localhost helloworld]# git push origin v1.0
Counting objects: 1, done.
Writing objects: 100% (1/1), 160 bytes, done.
Total 1 (delta 0), reused 0 (delta 0)
To git@192.168.40.125:lizhixian/helloworld.git
 * [new tag]         v1.0 -&gt; v1.0
[root@localhost helloworld]# 
</code></pre><p>这时候就可以在gitlab上看到你推送的tag了</p>
<p><img src="/images/img/38.jpg" alt=""></p>
<p>那么tag如何使用呢？很简单，简直一学就会</p>
<p>假如helloworld已经开发到了v2.0，这时候v1.0发现了一出bug，我们需要进行修复</p>
<pre><code>[root@localhost helloworld]# git checkout -b v1.0_bugfix v1.0
Switched to a new branch &apos;v1.0_bugfix&apos;
</code></pre><p>到了，到此git分支策略的理论和实践我们都过了一遍，顺带送了大家tag的使用方法。</p>
<p>我还是那句话：任何惊艳的技艺都是勤学苦练出来的。希望大家会用git，爱上git。 see you</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;git-分支管理策略&quot;&gt;&lt;a href=&quot;#git-分支管理策略&quot; class=&quot;headerlink&quot; title=&quot;git 分支管理策略&quot;&gt;&lt;/a&gt;git 分支管理策略&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;0-一段发自内心的废话&quot;&gt;&lt;a href=&quot;#0-一段发
    
    </summary>
    
    
      <category term="-git" scheme="http://www.banxiaoyu.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>My new Post</title>
    <link href="http://www.banxiaoyu.com/2016/12/22/My-new-Post/"/>
    <id>http://www.banxiaoyu.com/2016/12/22/My-new-Post/</id>
    <published>2016-12-22T03:10:15.000Z</published>
    <updated>2016-12-22T07:05:00.849Z</updated>
    
    <content type="html"><![CDATA[<h2 id="测试新建"><a href="#测试新建" class="headerlink" title="测试新建"></a>测试新建</h2><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;测试新建&quot;&gt;&lt;a href=&quot;#测试新建&quot; class=&quot;headerlink&quot; title=&quot;测试新建&quot;&gt;&lt;/a&gt;测试新建&lt;/h2&gt;&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;ext
    
    </summary>
    
      <category term="Testing" scheme="http://www.banxiaoyu.com/categories/Testing/"/>
    
    
      <category term="新增" scheme="http://www.banxiaoyu.com/tags/%E6%96%B0%E5%A2%9E/"/>
    
      <category term="Testing" scheme="http://www.banxiaoyu.com/tags/Testing/"/>
    
      <category term="Tes试试" scheme="http://www.banxiaoyu.com/tags/Tes%E8%AF%95%E8%AF%95/"/>
    
      <category term="Another Tag" scheme="http://www.banxiaoyu.com/tags/Another-Tag/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.banxiaoyu.com/2016/12/22/hello-world/"/>
    <id>http://www.banxiaoyu.com/2016/12/22/hello-world/</id>
    <published>2016-12-22T02:00:00.727Z</published>
    <updated>2016-12-22T02:00:00.727Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
